extern "C" %{
/*
 * Copyright (c) 2019 The Universiy of Tennessee and The Universiy
 *                    of Tennessee Research Foundation. All rights
 *                    reserved.
 */
#include "parsec/data_dist/matrix/matrix.h"
#include "benchmark_internal.h"
#include "core_c.h"

static inline int get_num_args_internal(void *L, void *B, void *R){
  int num_args = 1;

  if( NULL != L )
      num_args++;
  if( NULL != B )
      num_args++;
  if( NULL != R )
      num_args++;

  return num_args;
}

/* The following routines are to simplify dgemm_internal_init
 * 1. Donot cound nb_tasks, but the last po broadcast terminate
 * 2. Create own parsec_key_fn_t struncture
 */
static uint32_t pretermined_nb_tasks(struct __parsec_stencil_1d_internal_taskpool_s *__tp);
static parsec_key_t my_make_key_task(const parsec_taskpool_t * tp, const assignment_t * as);
static char *my_key_print_task(char *buffer, size_t buffer_size, parsec_key_t __parsec_key_, void *user_data);

static parsec_key_fn_t my_key_fns_task = {
    .key_equal = parsec_hash_table_generic_64bits_key_equal,
    .key_print = my_key_print_task,
    .key_hash = parsec_hash_table_generic_64bits_key_hash
};

%}

%option nb_local_tasks_fn = pretermined_nb_tasks

descA       [ type = "parsec_tiled_matrix_dc_t*" ]
graph       [ type = "task_graph_t" ]
nb_fields   [ type = "int" ]
time_steps  [ type = "int" ]
graph_idx   [ type = "int" ]
extra_local_memory   [ type = "char**" ]

task(t, x) [ hash_struct = my_key_fns_task
             make_key_fn = my_make_key_task ]

t = 0 .. time_steps-1
x = 0 .. descA->lnt-1
m = t%nb_fields

: descA(m, x)

READ L <- (t > 0 && x > 0)? A task(t-1, x-1): NULL
READ B <- (t > 0)? A task(t-1, x): NULL
READ R <- (t > 0 && x < descA->lnt-1)? A task(t-1, x+1): NULL

RW A <- descA(m, x)
     -> (t < time_steps-1 && x > 0)? R task(t+1, x-1)
     -> (t < time_steps-1)? B task(t+1, x)
     -> (t < time_steps-1 && x < descA->lnt-1)? L task(t+1, x+1)

BODY
{
    int num_args; 
    num_args = get_num_args_internal(L, B, R); 
   // printf("t: %d, x: %d, num_args: %d\n", t, x, num_args);
    if( 0 != x )
        CORE_kernel(es, graph, A, L, B, R, NULL, NULL, num_args, x, t, graph_idx, descA->super.myrank, extra_local_memory);
    else
        CORE_kernel(es, graph, A, B, R, L, NULL, NULL, num_args, x, t, graph_idx, descA->super.myrank, extra_local_memory);
}
END

extern "C" %{

static uint32_t pretermined_nb_tasks(struct __parsec_stencil_1d_internal_taskpool_s *__tp)
{
    int NT = __tp->super._g_descA->lnt;
    int nodes = __tp->super._g_descA->super.nodes;
    int myrank = __tp->super._g_descA->super.myrank;
    (void)__tp;

    if( NT % nodes == 0 ) {
        return NT/nodes * __tp->super._g_time_steps;
    } else {
        if( myrank != nodes-1 )
            return (NT/nodes+1) * __tp->super._g_time_steps;
        else
            return (NT-(NT/nodes+1)*(nodes-1)) * __tp->super._g_time_steps;
    }
}

static parsec_key_t my_make_key_task(const parsec_taskpool_t * tp, const assignment_t * as)
{
    const __parsec_stencil_1d_internal_taskpool_t *__parsec_tp = (const __parsec_stencil_1d_internal_taskpool_t *) tp;
    const __parsec_stencil_1d_task_assignment_t *assignment = (const __parsec_stencil_1d_task_assignment_t *) as;
    int t_range = __parsec_tp->super._g_time_steps;
    uintptr_t __parsec_id = 0;
    const int t = assignment->t.value;
    int __jdf2c_t_min = 0;
    const int x = assignment->x.value;
    int __jdf2c_x_min = 0;
    __parsec_id += (t - __jdf2c_t_min);
    __parsec_id += (x - __jdf2c_x_min) * t_range;
    (void) __parsec_tp;
    return (parsec_key_t) __parsec_id;
}

static char *my_key_print_task(char *buffer, size_t buffer_size, parsec_key_t __parsec_key_, void *user_data)
{
    const __parsec_stencil_1d_internal_taskpool_t *__parsec_tp =
        (const __parsec_stencil_1d_internal_taskpool_t *) user_data;
    int t_range = __parsec_tp->super._g_time_steps;
    int x_range = __parsec_tp->super._g_descA->lnt;
    uintptr_t __parsec_key = (uintptr_t) __parsec_key_;
    int t = __parsec_key % t_range;
    __parsec_key /= t_range;
    int x = __parsec_key % x_range;
    __parsec_key /= x_range;
    snprintf(buffer, buffer_size, "task(%d, %d)", t, x);
    return buffer;
}

parsec_taskpool_t*
parsec_stencil_1d_New(parsec_tiled_matrix_dc_t *A, task_graph_t graph, int nb_fields,
                      int time_steps, int graph_idx, char **extra_local_memory)
{
  parsec_taskpool_t* stencil_1d_taskpool;
  parsec_stencil_1d_taskpool_t* taskpool = NULL;

  taskpool = parsec_stencil_1d_new(A, graph, nb_fields, time_steps, graph_idx, extra_local_memory);
  stencil_1d_taskpool = (parsec_taskpool_t*)taskpool;

  parsec_matrix_add2arena(taskpool->arenas[PARSEC_stencil_1d_DEFAULT_ARENA],
                          parsec_datatype_float_t, matrix_UpperLower,
                          1, A->mb, A->nb, A->mb,
                          PARSEC_ARENA_ALIGNMENT_SSE, -1 );

  return stencil_1d_taskpool;
}

/**
 * @param [inout] the parsec object to destroy
*/
void parsec_stencil_1d_Destruct(parsec_taskpool_t *taskpool)
{
  parsec_stencil_1d_taskpool_t *stencil_1d_taskpool = (parsec_stencil_1d_taskpool_t *)taskpool;
  parsec_matrix_del2arena(stencil_1d_taskpool->arenas[PARSEC_stencil_1d_DEFAULT_ARENA]);
  parsec_taskpool_free(taskpool);
}

/**
 * @brief Init dcY
 * 
 * @param [inout] dcY: the data, already distributed and allocated
 */
int parsec_stencil_1d(parsec_context_t *parsec,
                      parsec_tiled_matrix_dc_t *A, task_graph_t graph, int nb_fields,
                      int time_steps, int graph_idx, char **extra_local_memory)
{
  parsec_taskpool_t *parsec_stencil_1d = NULL;

  parsec_stencil_1d = parsec_stencil_1d_New(A, graph, nb_fields, time_steps, graph_idx, extra_local_memory); 

  if( parsec_stencil_1d != NULL ){
      parsec_enqueue(parsec, parsec_stencil_1d);
      parsec_context_start(parsec);
      parsec_context_wait(parsec);
      parsec_stencil_1d_Destruct(parsec_stencil_1d);
  }

  return 0;
}

%}
